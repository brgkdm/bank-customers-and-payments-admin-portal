import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { customerAPI, paymentAPI } from '@/lib/api';
import { useToast } from '@/hooks/use-toast';

const paymentSchema = z.object({
  musteriNo: z.number().min(1, 'Müşteri seçmek zorunludur'),
  guncelOdemeTutari: z.number().min(0, 'Ödeme tutarı 0 veya daha büyük olmalıdır').optional(),
  guncelBorcTutari: z.number().min(0, 'Borç tutarı 0 veya daha büyük olmalıdır').optional(),
  gecikmisBorcTutari: z.number().min(0, 'Gecikmiş borç tutarı 0 veya daha büyük olmalıdır').optional(),
  odenmisBorcTutari: z.number().min(0, 'Ödenmiş borç tutarı 0 veya daha büyük olmalıdır').optional(),
  sonOdemeTarihi: z.string().optional(),
});

type PaymentFormValues = z.infer<typeof paymentSchema>;

interface PaymentFormProps {
  onSuccess: () => void;
  onCancel: () => void;
}

export default function PaymentForm({ onSuccess, onCancel }: PaymentFormProps) {
  const { toast } = useToast();
  
  const form = useForm<PaymentFormValues>({
    resolver: zodResolver(paymentSchema),
    defaultValues: {
      musteriNo: 0,
      guncelOdemeTutari: undefined,
      guncelBorcTutari: undefined,
      gecikmisBorcTutari: undefined,
      odenmisBorcTutari: undefined,
      sonOdemeTarihi: '',
    },
  });

  // Fetch customers for dropdown
  const { data: customers } = useQuery({
    queryKey: ['customers'],
    queryFn: async () => {
      const response = await customerAPI.getAll();
      return response.data;
    },
  });

  const onSubmit = async (data: PaymentFormValues) => {
    try {
      const paymentData = {
        odemeId: 0, // Will be generated by database
        musteriNo: data.musteriNo,
        guncelOdemeTutari: data.guncelOdemeTutari,
        guncelBorcTutari: data.guncelBorcTutari,
        gecikmisBorcTutari: data.gecikmisBorcTutari,
        odenmisBorcTutari: data.odenmisBorcTutari,
        sonOdemeTarihi: data.sonOdemeTarihi ? data.sonOdemeTarihi : null,
      };

      await paymentAPI.create(paymentData);
      
      toast({
        title: 'Başarılı',
        description: 'Ödeme başarıyla oluşturuldu.',
      });
      
      onSuccess();
    } catch (error: any) {
      toast({
        title: 'Hata',
        description: error.response?.data?.message || 'Ödeme oluşturulurken bir hata oluştu.',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold">Yeni Ödeme</h2>
        <p className="text-muted-foreground">Yeni bir ödeme kaydı oluşturun</p>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField
              control={form.control}
              name="musteriNo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Müşteri</FormLabel>
                  <Select 
                    onValueChange={(value) => field.onChange(parseInt(value))}
                    value={field.value ? field.value.toString() : ''}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Müşteri seçin" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {customers?.map((customer: any) => (
                        <SelectItem key={customer.musteriNo} value={customer.musteriNo.toString()}>
                          {customer.ad} {customer.soyad} (#{customer.musteriNo})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="guncelOdemeTutari"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Güncel Ödeme Tutarı (₺)</FormLabel>
                  <FormControl>
                     <Input 
                       type="number" 
                       step="1"
                       {...field}
                       onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="guncelBorcTutari"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Güncel Borç Tutarı (₺)</FormLabel>
                  <FormControl>
                     <Input 
                       type="number" 
                       step="1"
                       {...field}
                       onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="odenmisBorcTutari"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Ödenmiş Borç Tutarı (₺)</FormLabel>
                  <FormControl>
                     <Input 
                       type="number" 
                       step="1"
                       {...field}
                       onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="gecikmisBorcTutari"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Gecikmiş Borç Tutarı (₺)</FormLabel>
                  <FormControl>
                     <Input 
                       type="number" 
                       step="1"
                       {...field}
                       onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="sonOdemeTarihi"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Son Ödeme Tarihi</FormLabel>
                  <FormControl>
                    <Input 
                      type="date"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="flex justify-end gap-4">
            <Button type="button" variant="outline" onClick={onCancel}>
              İptal
            </Button>
            <Button type="submit" className="bg-gradient-primary hover:bg-primary-hover">
              Ödeme Oluştur
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}